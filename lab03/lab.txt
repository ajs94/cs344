Aaron Santucci
CS 344

Exercise 3.1

a. Which algorithms work (in a timely manner) and which donâ€™t? Explain your results in terms of the capabilities (and implementations) of the algorithms and nature of the problems.

    Using 'easy' puzzle...

    Depth first graph:      Fails to complete in time. The problem has too many branching solutions for it.
    Arc consistency 3:      .025951385498046875 sec; fails on 'harder' puzzle. Arc constraints probably aren't thorough
                            enough for it.
    Backtracking search:    47.92798137664795 sec; took a long time to solve because it has to backtrace different
                            routes and test different solutions. Not viable for harder puzzles.
    Min conflicts:          Fails on easy puzzles. May solve sometimes if it gets a a lucky local solution to it.

b. What effect does configuring the settings for backtracking have on the results? Try the following:

    i.  Set the variable/value ordering (i.e., the select_unassigned_variable parameter) to first-unassigned-variable (the default) or minimum-remaining-values (i.e., mrv).

        Setting the select_unassigned_variable to mrv caused it to take even longer when solving. I ended up killing
            the program because it was taking way too long to solve.

    ii. Set the inference (i.e., the inference parameter) to forward-checking (i.e., forward_checking).

        Setting the inference to forward_checking to solves it on easy in .014472246170043945 seconds and on hard
            83.73500180244446 seconds. This is a huge improvement from before.

c. Which, if any, of these settings should work best for sudoku? What combination of settings actually works the best?

    Backtracking with forward-checking gives the best time results. This combined with mrv gives the ideal time.

Exercise 3.2

a. How large can n get for each of the algorithms? Why?

    Depth first search and AC3 fail at n=4.
    Backtracking solves it very fast up until around n=20, when it starts to slow down very rapidly.
    Min conflicts solves it very fast and slows down at a seemingly linear rate. Even at around n=1000 it solves it in
        about 1.5 seconds.

b. What backtracking settings work the best? Why?

    MRV and forward checking together work the best because they reduce the search space that it needs to check.

c. How many steps does Min-Conflicts require to do its work?

    The steps scales greater as n get larger but not necessarily linearly. In some cases it can be less than n.

Exercise 3.3

a. Compare and contrast the specifications for CSP (i.e., csp.CSP) and traditional problems (i.e., search.Problem).
    Be sure to consider the nature of states, domains, actions, results and goal tests.

    CSP implements the search class and inherits from it.
    The moves changes to the domain, results come from the the variable assigned in the search, and goal tests check
        search constraints. States and actions retain the same function.

b. Compare and contrast the nature of the heuristics deployed in traditional and constraint-based problem solving.

    Traditional search algorithms check for how close a solution brings it to its goal check values and usually
        associates them with a numerical value.
    Constraint based problem solving check how a move satisfies a group of constraints where those constraints
        eventually deliver it to its end goal.